/*

 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.10.1/userguide/tutorial_java_projects.html
 */
buildscript {
	ext {
		springBootVersion = '2.0.5.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'
    
     id "com.moowork.grunt" version "1.2.0"
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 1.8
// Define the main class for the application

mainClassName = 'mibs.asterisk.control.App'

distZip.enabled = false
bootDistTar.enabled = false
bootDistZip.enabled = false


dependencies {
  
    compile 'com.google.guava:guava:23.0'
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("org.springframework.boot:spring-boot-starter-thymeleaf")
	compile('org.springframework.boot:spring-boot-starter-websocket')

	

  // https://mvnrepository.com/artifact/org.springframework.session/spring-session-data-redis
	compile group: 'org.springframework.session', name: 'spring-session-data-redis', version: '2.0.6.RELEASE'
  
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '2.0.5.RELEASE'
	
	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
	
	compile files('libs/mysql-connector-java-5.1.24.jar')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
	// https://mvnrepository.com/artifact/org.springframework/spring-test
	testCompile group: 'org.springframework', name: 'spring-test', version: '5.1.0.RELEASE'
	
    testCompile 'junit:junit:4.12'
    // https://mvnrepository.com/artifact/org.mockito/mockito-core
	//testCompile group: 'org.mockito', name: 'mockito-core', version: '2.22.0'
	// https://mvnrepository.com/artifact/org.mockito/mockito-all
	//testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
	
    
}
test {
	// testLogging.showStandardStreams = true
	 beforeTest { descriptor ->
	     logger.lifecycle("Running test: ${descriptor}")
	  }
	testLogging.showStandardStreams = true
  /*  filter {
        //include specific method in any of the tests
        includeTestsMatching    "*LibraryTest"
        includeTestsMatching 	"*testTextMVC"
        includeTestsMatching    "*testCustomers"
      
      	includeTestsMatching	"*testMockedService"
      
      	includeTestsMatching   	"*testEasyMock"
      	includeTestsMatching    "*testDialEvent"
      	includeTestsMatching   	"*testDashboard"
    
    }
    */
 test.outputs.upToDateWhen {false}    
}
repositories {
    jcenter()
    mavenCentral()
}
