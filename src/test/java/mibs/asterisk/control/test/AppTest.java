package mibs.asterisk.control.test;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootContextLoader;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import mibs.asterisk.control.App;
import mibs.asterisk.control.controllers.UsersController;
import mibs.asterisk.control.entity.UserEntity;
import mibs.asterisk.control.repository.UserRepository;

import static org.junit.Assert.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import static org.mockito.AdditionalAnswers.returnsFirstArg;
import org.junit.Before;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;


@ComponentScan(basePackages ={"mibs.asterisk.control","mibs.asterisk.control.config", "mibs.asterisk.control.controllers", 
		"mibs.asterisk.control.entity","mibs.asterisk.control.dao", "mibs.asterisk.control.repository","mibs.asterisk.control.service" })
//@RunWith(SpringJUnit4ClassRunner.class)
//@ContextConfiguration(loader = SpringBootContextLoader.class)
//@WebAppConfiguration
//@RunWith(SpringRunner.class)
@WebAppConfiguration
@RunWith(MockitoJUnitRunner.class)
public class AppTest {
	
	private MockMvc mvc;
	private UsersController usersController;
	
	//@Autowired
    //private WebApplicationContext wac;
	
	@Mock
	private UserRepository userRepository;
	
    @Test 
    public void testAppHasAGreeting() {
        App classUnderTest = new App();
        
        assertNotNull("app should have a greeting1", classUnderTest.getGreeting());
    }
  

    @Before
    public void setup() {
    	 assertNotNull( userRepository );
    	 List<UserEntity> userEntities = new ArrayList<>();
    	 userEntities.add(new UserEntity(new Long(1),"admin1","123","ADMIN"));
    	 userEntities.add(new UserEntity(new Long(2),"admin2","123","ADMIN"));
    	 when( userRepository.findByName("admin")).thenReturn( new UserEntity(1L,"admin","123","ADMIN"));
    	 when( userRepository.findAll()).thenReturn( userEntities );
    	 
    	 //mvc = MockMvcBuilders.webAppContextSetup(this.wac).build();
    	 
    	 //mvc = MockMvcBuilders.standaloneSetup(usersController).setViewResolvers(new StandaloneMvcTestViewResolver()).build();
    	 
    }
    @Test 
    public void testFindByName() {
    	UserEntity us = userRepository.findByName("admin");
    	Long id = us.getId();
    	assertEquals(id, new Long(1));
    }
    @Test 
    public void testFindByAll() {
    	List<UserEntity> userEntities = userRepository.findAll();
    	assertEquals(userEntities.get(0).getId(), new Long(1));
    	assertEquals(userEntities.get(1).getId(), new Long(2));
    }
}
